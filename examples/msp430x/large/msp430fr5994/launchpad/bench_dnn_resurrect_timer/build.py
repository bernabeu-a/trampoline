#! /usr/bin/env python3
# -*- coding: UTF-8 -*-
#----------------------------------------------------------------------
#--- Python Build file for application base
#--- automatically generated by goil on Mon Jul 24 12:14:12 2023
#--- from root OIL file main.oil
#---
#--- Compiling a Trampoline application is done in 2 stages
#--- 1 - From the OIL file, a set of files is generated as long as
#---     build options. Among these files are the build.py and make.py
#---     files. make.py contains compilation rules when the OIL file
#---     and the included OIL files are modified. make.py is only
#---     written once when the goil command is typed.
#--- 2 - From all the C/assembly files (OS, Application, librairies,
#---     configuration, ...), the objects and the executable are
#---     produced. This is done by the build.py file.
#---     build.py is generated each time goil is called by make.py
#----------------------------------------------------------------------

import sys, os, subprocess, string, distutils.spawn
from string import Template

#--- Add some function for Python3 support

if sys.version_info[0] >=3 :
    def bytesdecode(obj) :
        return obj.decode(sys.stdout.encoding)
else :
    def bytesdecode(obj) :
        return obj

#--- Add the location of makefile.py to the import path
sys.path.append("/Users/bernabeu-a/Code/trampoline/make")

#--- Import the makefile system in python
import makefile, projfile

#--- To work with relative paths
scriptDir = os.path.dirname (os.path.abspath (sys.argv[0]))
os.chdir (scriptDir)

#--- Get goal as first argument
askedGoal = "all"
if len (sys.argv) > 1 :
  askedGoal = sys.argv [1]

if askedGoal == "all" or askedGoal == "clean" :
  goal = askedGoal
else :
  goal = "all"

#--- Get max parallel jobs as second argument
maxParallelJobs = 0 # 0 means use host processor count
if len (sys.argv) > 2 :
  maxParallelJobs = int (sys.argv [2])

#--- Instanciate a new makefile object
make = makefile.Make(goal)

#----------------------------------------------------------------------
#--- Various variables used after
#----------------------------------------------------------------------
compiler = r"msp430-elf-gcc"
cppCompiler = r"g++"
linker = r"msp430-elf-ld"
assembler = r"msp430-elf-gcc"
autosar = False
autosar_sc = 0
autosar_osapplications = False
with_ioc = False
with_com = False
scheduler = "osek"
trampoline_base_path = "/Users/bernabeu-a/Code/trampoline/"
cflags = []
cppflags = []
ldflags = []
asflags = []
# flags that should appear at the beginning of the command.
precflags = []
precppflags = []
preldflags = []
preasflags = []
includeDirs = []

cflags += "-Og -g3 -gdwarf-2 -ggdb".split()
cflags += "-I/opt/msp430-gcc-support-files/include".split()
cppflags += "-fno-rtti".split()
cppflags += "-felide-constructors".split()
cppflags += "-fno-threadsafe-statics".split()
cppflags += "-fno-use-cxa-get-exception-ptr".split()
cppflags += "-fno-enforce-eh-specs".split()
cflags += "-g".split()
cppflags += "-g".split()
cflags += "-Wall".split()
cppflags += "-Wall".split()
cflags += "-Wno-unused-but-set-variable".split()
cppflags += "-Wno-unused-but-set-variable".split()
cflags += "-Wmissing-field-initializers".split()
cppflags += "-Wmissing-field-initializers".split()
cflags += "-mmcu=msp430fr5994".split()
cppflags += "-mmcu=msp430fr5994".split()
cflags += "-nostartfiles".split()
cppflags += "-nostartfiles".split()
cflags += "-fno-builtin".split()
cppflags += "-fno-builtin".split()
cflags += "-fno-exceptions".split()
cppflags += "-fno-exceptions".split()
cflags += "-nostdlib".split()
cppflags += "-nostdlib".split()
cflags += "-ffunction-sections".split()
cppflags += "-ffunction-sections".split()
cflags += "-fdata-sections".split()
cppflags += "-fdata-sections".split()
cflags += "-mlarge".split()
cppflags += "-mlarge".split()
cflags += "-mdata-region=none".split()
cppflags += "-mdata-region=none".split()
cflags += "-mcode-region=none".split()
cppflags += "-mcode-region=none".split()
includeDirs += ["-I","/Users/bernabeu-a/Code/trampoline/machines/msp430x/large"]
includeDirs += ["-I","/Users/bernabeu-a/Code/trampoline/machines/msp430x/large/msp430fr5994/launchpad/checkpointing"]
if with_ioc:
  includeDirs += ["-I", "/Users/bernabeu-a/Code/trampoline/ioc"]
includeDirs += ["-I", "/Users/bernabeu-a/Code/trampoline/os"]
includeDirs += ["-I", "/Users/bernabeu-a/Code/trampoline/debug"]
includeDirs += ["-I", "main"]
cflags   += includeDirs
cppflags += includeDirs
asflags  += includeDirs

ldflags += "--fatal-warnings".split()
ldflags += "--warn-common".split()
ldflags += "--no-undefined".split()
ldflags += "--gc-sections".split()
ldflags += "-Map=bench_dnn.map".split()
ldflags += "--undefined=__mspabi_mpyi -lmul_f5".split()
ldflags += ["-L", "main"]
ldflags += ["-T", "script.ld"]
asflags += "-Wa,-g,--gdwarf-2,--gdwarf-sections".split()
asflags += "-Wall".split()
asflags += "-mmcu=msp430fr5994".split()
asflags += "-mlarge".split()
asflags += "-mdata-region=none".split()
asflags += "-mcode-region=none".split()

#----------------------------------------------------------------------
#--- Try to detect automatically the location of libc and libgcc
#--- This supposes the compiler has a (something)-gcc name
#--- for non posix target
#----------------------------------------------------------------------
if "gcc" in compiler:
  compilerFullPath = makefile.find_executable(compiler)
  if compilerFullPath != None:
    #--- Extract the (something) from the compiler executable name
    compilerParts = compiler.split('-')
    compilerParts.pop()
    compilerPrefix = "-".join(compilerParts)
    #--- Get the full path of the compiler
    compilerToolChainPath = os.path.dirname(os.path.dirname(compilerFullPath))
    #--- Get the version of the compiler, [:-1] removes the carriage return
    compilerVersion = subprocess.check_output([compiler, '-dumpversion'])[:-1]
    #--- Build the libc and libgcc paths
    procLibc  =subprocess.Popen([compilerFullPath,"-print-file-name=libc.a"]+cflags,stdout=subprocess.PIPE)
    procLibgcc=subprocess.Popen([compilerFullPath,"-print-libgcc-file-name"]+cflags,stdout=subprocess.PIPE)
    procLibc.wait()
    procLibgcc.wait()
    libcPath = os.path.dirname(procLibc.stdout.readline().strip())
    libgccPath = os.path.dirname(procLibgcc.stdout.readline().strip())
    #--- Add both to linker flags
    ldflags += ['-L' + bytesdecode(libcPath), '-lc']
    ldflags += ['-L' + bytesdecode(libgccPath), '-lgcc']

#----------------------------------------------------------------------
#--- Build the source files list
#----------------------------------------------------------------------
cSourceList = []
cppSourceList = []
sSourceList = []
oilSourceList = []

#--- OIL file
oilSourceList.append("main.oil")

#--- Kernel files 
cSourceList.append(projfile.ProjectFile("os/tpl_os_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_timeobj_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_action.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_error.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_os_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_os.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_interrupt_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_task_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_os_resource_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_chkpt_checkpoint_kernel.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("os/tpl_resurrect_kernel.c", trampoline_base_path))

#--- Add C files of the application
cSourceList.append(projfile.ProjectFile("main.c"))
cSourceList.append(projfile.ProjectFile("dnn.c"))
cSourceList.append(projfile.ProjectFile("dnn_calc.c"))
cSourceList.append(projfile.ProjectFile("fixed.c"))
cSourceList.append(projfile.ProjectFile("mat.c"))

#--- Add generated files
cSourceList.append(projfile.ProjectFile("main/tpl_app_config.c"))

cSourceList.append(projfile.ProjectFile("main/tpl_dispatch_table.c"))
cSourceList.append(projfile.ProjectFile("main/tpl_invoque.S"))
cSourceList.append(projfile.ProjectFile("main/tpl_resurrect.c"))
sSourceList.append(projfile.ProjectFile("main/tpl_irq_handlers.S"))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_machine_msp430x.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_startup.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_clocks.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_checkpointing.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_checkpoint.c", trampoline_base_path))
sSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_startup.S", trampoline_base_path))
sSourceList.append(projfile.ProjectFile("machines/msp430x/large/tpl_sc_handler.S", trampoline_base_path))
sSourceList.append(projfile.ProjectFile("machines/msp430x/large/framtr.S", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/msp430fr5994/launchpad/checkpointing/ref_a.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/msp430fr5994/launchpad/checkpointing/adc12_b.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/msp430fr5994/launchpad/checkpointing/tpl_chkpt_adc.c", trampoline_base_path))
cSourceList.append(projfile.ProjectFile("machines/msp430x/large/msp430fr5994/launchpad/checkpointing/tpl_chkpt_io.c", trampoline_base_path))
#----------------------------------------------------------------------
#--- Build the object list and the compiler dependancies
#----------------------------------------------------------------------
objectList = []

for sourceFile in cSourceList:
  source = sourceFile.src()
  object = sourceFile.obj("build")
  depObject = sourceFile.dep("build")
  objectList.append(object)
  rule = makefile.Rule([object], "Compiling " + source)
  rule.deleteTargetDirectoryOnClean()
  rule.mDependences.append(source)
  rule.mCommand.append(compiler)
  rule.mCommand += precflags
  rule.mCommand += ["-c", source]
  rule.mCommand += ["-o", object]
  rule.mCommand += ["-MD", "-MP", "-MF", depObject]
  rule.mCommand += cflags
  rule.enterSecondaryDependanceFile (depObject, make)
  make.addRule(rule)

for sourceFile in cppSourceList:
  source = sourceFile.src()
  object = sourceFile.obj("build")
  depObject = sourceFile.dep("build")
  objectList.append(object)
  rule = makefile.Rule([object], "Compiling " + source)
  rule.deleteTargetDirectoryOnClean()
  rule.mDependences.append(source)
  rule.mCommand.append(cppCompiler)
  rule.mCommand += precppflags
  rule.mCommand += ["-c", source]
  rule.mCommand += ["-o", object]
  rule.mCommand += ["-MD", "-MP", "-MF", depObject]
  rule.mCommand += cppflags
  rule.enterSecondaryDependanceFile (depObject, make)
  make.addRule(rule)

for sourceFile in sSourceList:
  source = sourceFile.src()
  object = sourceFile.obj("build")
  objectList.append(object)
  rule = makefile.Rule([object], "Assembling " + source)
  rule.mDependences.append(source)
  rule.mCommand.append(assembler)
  rule.mCommand += preasflags
  rule.mCommand += ["-c", source]
  rule.mCommand += ["-o", object]
  rule.mCommand += asflags
  make.addRule(rule)

product = "bench_dnn_exe"
rule = makefile.Rule ([product], "Linking " + product)
rule.deleteTargetFileOnClean()
rule.mDeleteTargetOnError = True
rule.mDependences += objectList
rule.mCommand += [linker]
rule.mCommand += ["-o", product]
rule.mCommand += preldflags
rule.mCommand += objectList
rule.mCommand += ldflags

make.addRule (rule)

make.addGoal("all", [product], "Building all")
make.addGoal("compile", objectList, "Compile source files")


make.runGoal(maxParallelJobs, maxParallelJobs == 1)

postVariableMapping = dict(
  MACHINE_PATH='/Users/bernabeu-a/Code/trampoline/machines',
  ARCH_PATH='/Users/bernabeu-a/Code/trampoline/machines/msp430x',
  BOARD_PATH='/Users/bernabeu-a/Code/trampoline/machines/msp430x/large/msp430fr5994/launchpad',
  TARGET='msp430x/large/msp430fr5994/launchpad'
)


#----------------------------------------------------------------------
#--- post commands
#----------------------------------------------------------------------
if make.errorCount() == 0:
  if askedGoal == "flash" :
    commandLine = "DSLite load -c $ARCH_PATH/ccxml/MSP-EXP430FR5994LP.ccxml -f "
    commandLine += "bench_dnn_exe "
    commandLineTemplate = Template(commandLine)
    commandLine = commandLineTemplate.safe_substitute(postVariableMapping)
    if makefile.find_executable("DSLite") != None:
      print("\033[1m\033[95mFlashing bench_dnn_exe on msp430x/large/msp430fr5994/launchpad\033[0m")
      subprocess.call(commandLine, shell=True)
    else:
      print("Command 'DSLite' not in PATH")


make.printErrorCountAndExitOnError()

#----------------------------------------------------------------------
#-- End of build.py
#----------------------------------------------------------------------
