#includeifexists <buildOptions.oil>

IMPLEMENTATION  msp430x {

  /* Interrupt sources */
  INTERRUPT [] {
    UINT32 ADDRESS;
    IDENTIFIER HANDLER;
    STRING WITH_AUTO LINKED;
  };

  /* Add to COUNTER objects target interrupt sources */
  COUNTER [] {
    #include <interruptSources.oil>
  };

  /* Add to ISR objects target interrupt sources */
  ISR [] {
    #include <interruptSources.oil>
    BOOLEAN [
      TRUE,
      FALSE 
    ] EXIT_FROM_LPM = FALSE;
  };
  
//  ALARM [] {
//    UINT32 ALARMTIME = 0;
//    UINT32 CYCLETIME = 0;
//    UINT32 NB_ACTIVATION = 0;
//    EVENT_TYPE EV[];
//  };
  
  CONCERTO_STATE [] {
  };
  
  CONCERTO_TRANSITION [] {
   CONCERTO_STATE_TYPE FROM_STATE;
   CONCERTO_STATE_TYPE TO_STATE;
//   IDENTIFIER ENTRY_FUNCTION;
  };
  
  ALARM_RESURRECT [] {
    ALARM_TYPE ALARM;
    UINT32 ALARMTIME;
    UINT32 CYCLETIME;
    UINT32 NB_ACTIVATION;
  };
  
  STATE [] {
    BOOLEAN [
      TRUE,
      FALSE
      ] INITIAL_STATE = FALSE;
  };

  TRANSITION [] {
    STATE_TYPE FROM_STATE;
    STATE_TYPE TO_STATE;
    UINT32 ENERGY;
    TASK_TYPE TASK[];
    ALARM_TYPE ALARM[];
  };

  RESURRECT_STATE [] {
    BOOLEAN [
      TRUE,
      FALSE
      ] INITIAL_STATE = FALSE;
  };

  RESURRECT_EVENT [] {
  };
  
  RESURRECT_SLOPE []{
   UINT32 VALUE = 0;
  };
  
  RESURRECT_TIME_SLOPE []{
   UINT32 VALUE = 0;
  };
  
  RESURRECT_SUPER_STEP [] {
    IDENTIFIER FUNC[];
    RESURRECT_SLOPE_TYPE SLOPE[];
    RESURRECT_TIME_SLOPE_TYPE TIME_SLOPE[]; 
  };
  
  RESURRECT_TRANSITION [] {
    RESURRECT_STATE_TYPE FROM_STATE;
    RESURRECT_STATE_TYPE TO_STATE;
    UINT32 ENERGY;
    IDENTIFIER ENTRY;
    IDENTIFIER FUNC[];
    ALARM_RESURRECT_TYPE ALARM_RESURRECT[];
//    BOOLEAN [
//      TRUE {
//         ALARM_TYPE ALARM;
//         UINT32 NB_ACTIVATION = 0;
//      },
//      FALSE
//     ] WITH_ALARM = FALSE;
    RESURRECT_EVENT_TYPE RES_EVENT[];
    RESURRECT_SLOPE_TYPE SLOPE[];
    RESURRECT_TIME_SLOPE_TYPE TIME_SLOPE[];
    UINT32 DELTA_V;
    UINT32 AWARD;
  };
  
  /* Additional OS attributes */
  OS {
    /* CPU frequency */
    UINT32 [1,2,4,6,8,12,16,21,24] CPU_FREQ_MHZ = 1;
    /* Power mode when in idle task */
    ENUM [ ACTIVE, LPM0, LPM1, LPM2, LPM3 ] IDLE_POWER_MODE = ACTIVE;
    /* Initialize variables in .data section with DMA */
    BOOLEAN INIT_WITH_DMA = FALSE;

    /* enable checkpointing. Define the default period */
    BOOLEAN [ 
      TRUE { 
         ENUM [
           PERIODIC {
               UINT32 CYCLETIME = 5000;
               UINT32 HIBERNATE_THRESHOLD = 2000;
               UINT32 RESUME_FROM_HIBERNATE_THRESHOLD = 2500;
            },
           STATIC {
             UINT32 RESUME_FROM_HIBERNATE_THRESHOLD = 2500;
           }
         ] MODE = PERIODIC;
      },
      FALSE
    ] CHECKPOINTING = FALSE;
    
    /* enable use of LEA and size of LEA RAM */
    BOOLEAN [
     TRUE {UINT32 LEA_RAM = 4096;},
     FALSE {UINT32 LEA_RAM = 0;}
    ] LEA = FALSE; 

    /* Enable or not Systick at startup */
    BOOLEAN [
      TRUE,
      FALSE
    ] SYSTICK = TRUE;
    
    /* enable intermittent sequence */
    BOOLEAN [
      TRUE {
       UINT32 ENERGY_LEVEL = 1;
      },
      FALSE
    ]SEQUENCING = FALSE;
    
    /* RESURRECT Activity */
    BOOLEAN [
      TRUE {
       UINT32 ENERGY_LEVEL = 1;
       BOOLEAN EVENT = FALSE;
       BOOLEAN SUPER_STEP = FALSE;
       BOOLEAN BET = FALSE;
      },
      FALSE
    ] RESURRECT = FALSE;
    
    
    BOOLEAN [
     TRUE {
       ENUM [
       SMA {
        UINT32 SIZE = 3;
       },
       EWMA{
       }
       ] PREDICTOR = SMA;
     },
     FALSE
    ] ENERGY_PREDICTION = FALSE;
    
    /* Timer for activity with RESURRECT */
    BOOLEAN [
      TRUE,
      FALSE
    ] TIMER_ACTIVITY = FALSE;
    
    /* trace */
    BOOLEAN [
      TRUE {
        ENUM [
          fram {
            UINT32 SIZE = 16384;
            UINT32 ADDRESS = 0;
          },
          serial
  ] FORMAT = serial;
      },
      FALSE
    ] TRACE = FALSE;
  };

};

CPU msp430x {

  PLATFORM_FILES msp430x {
    PATH   = "msp430x/large";
    CFILE  = "tpl_machine_msp430x.c";
    CFILE  = "tpl_startup.c";
    CFILE  = "tpl_clocks.c";
    ASFILE = "tpl_startup.S";
    ASFILE = "tpl_sc_handler.S";
//    CFILE  = "tpl_trace.c";
    /* Checkpointing */
    ASFILE = "framtr.S";
    CFILE = "tpl_checkpointing.c";
    CFILE = "tpl_checkpoint.c";
  };

  GENERATED_FILES msp430x {
    ASFILE = "tpl_irq_handlers.S";
  };

};
