%

#
# This template applies to ISR category 1 
#
let handlerSource := ""
if [obj type] == @struct then
  let handlerSource := obj::SOURCE
%
.extern % ! obj::NAME %_function
%
else
  let handlerSource := obj[0]::SOURCE
  foreach item in obj do
%
.extern % ! item::NAME %_function%
  after %
%
  end foreach
end if

let nameVector := ""
let bitMAX := 0
# TODO : find a way to distinguish IO and other
let isNotExternalInterrupt := 0

if handlerSource == "ADC12_VECTOR" then
   let nameVector := "ADC12IV"
   let bitMAX := 23
   let isNotExternalInterrupt := 1
elsif handlerSource == "RTC_VECTOR" then
   let nameVector := "RTCIV"
   let bitMAX := 7
   let isNotExternalInterrupt := 1
elsif handlerSource == "EUSCI_B3_VECTOR" then
   let nameVector := "UCB3IV"
   let bitMAX := 14
   let isNotExternalInterrupt := 1
elsif handlerSource == "EUSCI_B2_VECTOR" then
   let nameVector := "UCB2IV"
   let bitMAX := 14
   let isNotExternalInterrupt := 1
elsif handlerSource == "EUSCI_B1_VECTOR" then
   let nameVector := "UCB1IV"
   let bitMAX := 14
   let isNotExternalInterrupt := 1
elsif handlerSource == "EUSCI_A3_VECTOR" then
   let nameVector := "UCA3IV"
   let bitMAX := 3
   let isNotExternalInterrupt := 1
elsif handlerSource == "EUSCI_A2_VECTOR" then
   let nameVector := "UCA2IV"
   let bitMAX := 3
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER4_A1_VECTOR" then
   let nameVector := "TA4IV"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER4_A0_VECTOR" then
   let nameVector := "TA4IV_0"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER3_A1_VECTOR" then
   let nameVector := "TA3IV"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER3_A0_VECTOR" then
   let nameVector := "TA3IV_0"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER2_A1_VECTOR" then
   let nameVector := "TA2IV"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER2_A0_VECTOR" then
   let nameVector := "TA2IV_0"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER1_A1_VECTOR" then
   let nameVector := "TA1IV"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER1_A0_VECTOR" then
   let nameVector := "TA1IV_0"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER0_A1_VECTOR" then
   let nameVector := "TA0IV"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER0_A0_VECTOR" then
   let nameVector := "TA0IV_0"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER0_B1_VECTOR" then
   let nameVector := "TB0IV"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "TIMER0_B0_VECTOR" then
   let nameVector := "TB0IV_0"
   let bitMAX := 6
   let isNotExternalInterrupt := 1
elsif handlerSource == "USCI_A1_VECTOR" then
   let nameVector := "UCA1IV"
   let bitMAX := 3
   let isNotExternalInterrupt := 1
elsif handlerSource == "USCI_A0_VECTOR" then
   let nameVector := "UCA0IV"
   let bitMAX := 3
   let isNotExternalInterrupt := 1
elsif handlerSource == "USCI_B0_VECTOR" then
   let nameVector := "UCB0IV"
   let bitMAX := 14
   let isNotExternalInterrupt := 1
elsif handlerSource == "DMA_VECTOR" then
   let nameVector := "DMAIV"
   let bitMAX := 7
   let isNotExternalInterrupt := 1
elsif handlerSource == "COMP_E_VECTOR" then
   let nameVector := "CEIV"
   let bitMAX := 4
   let isNotExternalInterrupt := 1
end if

%
.section .irq_func, "ax"
.global tpl_direct_irq_handler_% !handlerSource %
.type   tpl_direct_irq_handler_% !handlerSource %, \%function
/*-----------------------------------------------------------------------------
 */
tpl_direct_irq_handler_% !handlerSource %:

/*-----------------------------------------------------------------------------
 * -1- Push volatile registers
 */
  pushm.a   #5, r15
/*  
 * PROCESS STACK:
 *    +--------------------+
 *  0 |   0  | r11.19:16   | + 0
 *    +--------------------+
 *  1 |      r11.15:0      | + 2
 *    +--------------------+
 *  2 |   0  | r12.19:16   | + 4
 *    +--------------------+
 *  3 |      r12.15:0      | + 6
 *    +--------------------+
 *  4 |   0  | r13.19:16   | + 8
 *    +--------------------+
 *  5 |      r13.15:0      | + 10
 *    +--------------------+
 *  6 |   0  | r14.19:16   | + 12
 *    +--------------------+
 *  7 |      r14.15:0      | + 14
 *    +--------------------+
 *  8 |   0  | r15.19:16   | + 16
 *    +--------------------+
 *  9 |      r15.15:0      | + 18
 *    +--------------------+
 * 10 | PC.19:16 | SR.11:0 | + 20
 *    +--------------------+
 * 11 |      PC.15:0       | + 22
 *    +--------------------+
 * 12 | CallTerminateXXX   | + 24
 *    +--------------------+
 */%
if [obj type] == @struct then%
/*-----------------------------------------------------------------------------
 * -2- Call the ISR1.
 */
  calla      #% ! obj::NAME + "_function"
  if [PORT_IRQ contains: obj::SOURCE] then
    # PORT IRQ, ack the interrupt
    if obj::SOURCE == "TIMER0_A0_VECTOR" | obj::SOURCE == "TIMER1_A0_VECTOR" | obj::SOURCE == "TIMER2_A0_VECTOR" | obj::SOURCE == "TIMER3_A0_VECTOR" | obj::SOURCE == "TIMER4_A0_VECTOR" | obj::SOURCE == "TIMER0_B0_VECTOR" then 
    
    else
%
/*-----------------------------------------------------------------------------
 * -2b- Ackowledge the interrupt
 */
  movx       #0,__P% ! [obj::SOURCE charAtIndex: 4] %IV%
  end if
  end if
  
elsif  isNotExternalInterrupt == 1 then
  if nameVector == "TA4IV_0" | nameVector == "TA3IV_0" | nameVector == "TA2IV_0" | nameVector == "TA1IV_0" | nameVector == "TA0IV_0" | nameVector == "TB0IV_0" then
%
  calla      #% ! handler::NAME %_function%
  else
%
  addx      &__% ! nameVector %, pc
  jmp       tpl_direct_irq_handler_exit_% !handlerSource
  let bitMap := [obj mapBy: "BIT"]
  loop bit from 0 to bitMAX do
    if exists bitMap[[bit string]] then%
  jmp       tpl_% ! nameVector %_% ! bit %_handler%
    else%
  jmp       tpl_direct_irq_handler_exit_% !handlerSource
    end if
  tab(60) %/* bit % ! bit % */%
  end loop
    foreach handler in bitMap do%
tpl_% ! nameVector %_% ! handler::BIT %_handler:
  calla      #% ! handler::NAME %_function%
%
/*-----------------------------------------------------------------------------
 * -2b- exit from LPM if required
   we pushed 5 volatile registers so SR is 4*5 bytes deep
 */%
  if handler::EXIT_FROM_LPM then%
  bicx      #0xF0, 20(SP)%
  end if
  between %
  jmp       tpl_direct_irq_handler_exit_% !handlerSource 
  end foreach
  end if
else
%
/*-----------------------------------------------------------------------------
 * -2- Get the highest priority interrupt of the port from P%
  ! [obj[0]::SOURCE charAtIndex: 4] %IV 
 * and jump to the handler
 */
  addx.a       &__P% ! [obj[0]::SOURCE charAtIndex: 4] %IV, pc
  jmp       tpl_direct_irq_handler_exit_% !handlerSource
  # A set of handler is linked to the same port
  let bitMap := [obj mapBy: "BIT"]
  loop bit from 0 to 7 do
    if exists bitMap[[bit string]] then%
  jmp       tpl_p% ! [obj[0]::SOURCE charAtIndex: 4] %_% ! bit %_handler%
    else%
  jmp       tpl_direct_irq_handler_exit_% !handlerSource
    end if
  tab(60) %/* bit % ! bit % */%
  end loop
  foreach handler in bitMap do%
tpl_p% ! [handler::SOURCE charAtIndex: 4] %_% ! handler::BIT %_handler:
  calla      #% ! handler::NAME %_function%
%
/*-----------------------------------------------------------------------------
 * -2b- exit from LPM if required
   we pushed 5 volatile registers so SR is 2*5 bytes deep
 */%
  if handler::EXIT_FROM_LPM then%
  bicx      #0xF0, 20(SP)%
  end if
  between %
  jmp       tpl_direct_irq_handler_exit_% !handlerSource 
  end foreach
end if %
/*-----------------------------------------------------------------------------
 * -3- Pop volatile registers
 */
tpl_direct_irq_handler_exit_% !handlerSource %:
  popm.a    #5, r15%
if [obj type] == @struct then
  if obj::EXIT_FROM_LPM then %
/*-----------------------------------------------------------------------------
 * -3b- exit from LPM if required
 */
 %
  %
  bicx      #0xF0, 0(SP)%
  end if
else
end if
% 
/*-----------------------------------------------------------------------------
 * -4- Return.
 */
  reti
/*-----------------------------------------------------------------------------
*/
