/**
 * set the CPU default frequency at startup in MHz.
 * Value defined with .oil key CPU->OS->CPU_FREQ_MHZ;
 *
 * This frequency may be overriden using at runtime with
 * void tpl_set_mcu_clock(uint16_t freqInMHz);
 * (defined in tpl_clocks.h)
 */
#define CPU_FREQ_MHZ    % ! exists OS::CPU_FREQ_MHZ default (1) %

/*
 * Power mode to be used in the idle task
 */
#define ACTIVE_POWER_MODE  -1
#define LPM0_POWER_MODE     0
#define LPM1_POWER_MODE     1
#define LPM2_POWER_MODE     2
#define LPM3_POWER_MODE     3

#define IDLE_POWER_MODE   % ! OS::IDLE_POWER_MODE %_POWER_MODE
#define IDLE_LPM          % ! OS::IDLE_POWER_MODE
%

/*
 * If YES, init the .data section using the DMA
 */
#define WITH_INIT_WITH_DMA    % ! yesNo(OS::INIT_WITH_DMA) %

/*
 * If YES, use checkpointing with the msp430
 */
#define WITH_CHECKPOINTING    % ! yesNo(OS::CHECKPOINTING) %
%
if exists OS::CHECKPOINTING_S then

if OS::CHECKPOINTING_S::MODE == "PERIODIC" then
%
#define WITH_CHECKPOINTING_PERIODIC    YES
#define HIBERNATE_THRESHOLD   % !OS::CHECKPOINTING_S::MODE_S::HIBERNATE_THRESHOLD%
#define RESUME_FROM_HIBERNATE_THRESHOLD    % !OS::CHECKPOINTING_S::MODE_S::RESUME_FROM_HIBERNATE_THRESHOLD%
%
else
%
#define WITH_CHECKPOINTING_STATIC     YES
#define RESUME_FROM_HIBERNATE_THRESHOLD    % !OS::CHECKPOINTING_S::MODE_S::RESUME_FROM_HIBERNATE_THRESHOLD%
%
end if
end if
%
/*
 * If YES, use lea with the msp430
 */
#define WITH_LEA             % ! yesNo(OS::LEA) %

/*
 * If YES, use sequence with the msp430
 */
 #define WITH_SEQUENCING    % ! yesNo(OS::SEQUENCING) %
 
 /*
 * If YES, use RESURRECT with the msp430
 */
 #define WITH_RESURRECT     % ! yesNo(OS::RESURRECT) %
%
let SEQUENCE := exists SEQUENCE default (@())
let STATE := exists STATE default (@())
let TRANSITION := exists TRANSITION default (@())
%
/*
 * Number of sequences
 */
#define TRANSITION_COUNT    % ![TRANSITION length]%
#define STATE_COUNT    % ![STATE length]%

/*-----------------------------------------------------------------------------
 *  Activate or not the System counter
 */
#define WITH_SYSTICK   % !yesNo(exists OS::SYSTICK default(false)) %


%
if OS::SEQUENCING then%
#define ENERGY_LEVEL_COUNT    % !OS::SEQUENCING_S::ENERGY_LEVEL%
%
end if

let RESURRECT_STATE := exists RESURRECT_STATE default (@())
let RESURRECT_TRANSITION := exists RESURRECT_TRANSITION default (@())
let RESURRECT_EVENT := exists RESURRECT_EVENT default (@())

%
/*
 * Number of Resurrect State
 */
#define RESURRECT_STATE_COUNT    % ![RESURRECT_STATE length]% 
#define RESURRECT_TRANSITION_COUNT    % ![RESURRECT_TRANSITION length]%
#define RESURRECT_EVENT_COUNT     %![RESURRECT_EVENT length]%
%
if OS::RESURRECT then%
#define ENERGY_LEVEL_COUNT    % !OS::RESURRECT_S::ENERGY_LEVEL%
#define RESURRECT_TASK_ID 0
#define WITH_RESURRECT_EVENT %! yesNo(exists OS::RESURRECT_S::EVENT default(false))%
#define WITH_TIMER_ACTIVITY   % ! yesNo(exists OS::TIMER_ACTIVITY default(false)) %

%
if OS::RESURRECT_S::EVENT then
#%typedef uint16 tpl_event_resurrect;
#%

foreach res_event in RESURRECT_EVENT before
%
/*
 * ID of RESURRECT EVENT
 */
%
do
%#define %!res_event::NAME%  %!INDEX%
%
end foreach
end if
end if

template if exists tpl_library_defines
